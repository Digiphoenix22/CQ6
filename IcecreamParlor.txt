import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    static int minDiff = Integer.MAX_VALUE;
    static List<Integer> bestCombination = new ArrayList<>();

    public static List<Integer> icecreamParlor(int m, List<Integer> arr) {
        minDiff = Integer.MAX_VALUE;
        // This should work... IT SHOULD WORK. I HOPE. I PRAY.
        bestCombination.clear();
        List<Integer> currentCombination = new ArrayList<>();
        recurse(arr, m, 0, currentCombination, 0);
        return bestCombination;
    }

    public static void recurse(List<Integer> arr, int m, int currentIndex, List<Integer> currentCombination, int currentSum) {
        // If statement if only 3, and index == arraysize
        if (currentCombination.size() == 3 || currentIndex == arr.size()) {
            if (currentCombination.size() == 3 && currentSum <= m && m - currentSum < minDiff) {
                minDiff = m - currentSum;
                bestCombination.clear();
                bestCombination.addAll(currentCombination);
            }
            return;
        }
        
        // Not selecting the current flavor
        recurse(arr, m, currentIndex + 1, currentCombination, currentSum);

        // Selecting the current flavor
        currentCombination.add(currentIndex + 1); 
        recurse(arr, m, currentIndex + 1, currentCombination, currentSum + arr.get(currentIndex));
        currentCombination.remove(currentCombination.size() - 1);
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int m = Integer.parseInt(bufferedReader.readLine().trim());

                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Integer::parseInt)
                    .collect(toList());

                List<Integer> result = Result.icecreamParlor(m, arr);

                bufferedWriter.write(
                    result.stream()
                        .map(Object::toString)
                        .collect(joining(" "))
                    + "\n"
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
